#!/usr/local/bin/perl -w
#
# $Id$
#

use strict;
use Config::IniFiles;
#use lib 'blib/lib';
use HOSTDB;
use Getopt::Std;
use vars qw ($opt_h $opt_d $opt_o $opt_q $opt_R);
use FileHandle;

getopts ('hdo:qR');

sub usage
{
	die (<<EOD);
Syntax: $0 [options] subnet ...
	subnet is the subnet in slash notation (eg. 192.168.1.0/24)
	
	options :
		-d		debug
		-o dir		output to dir
		-q 		quiet
		-R		remove old files for subnet

EOD
}

usage () if ($opt_h);

my $debug = defined ($opt_d);
my $quiet = defined ($opt_q);
my $remove_old = defined ($opt_R);
my $output_dir = $opt_o || '.';
$output_dir =~ s/\/$//o;	# remove trailing slash

die ("$0: Output dir '$output_dir' is not a directory\n") if (! -d $output_dir);

my $hostdb = HOSTDB::DB->new (inifile => HOSTDB::get_inifile (),
			      debug => $debug
			     );

my @subnets;
foreach my $subnet_name (@ARGV) {
	if ($subnet_name eq '*') {
		push (@subnets, $hostdb->findallsubnets ());
	} else {
		push (@subnets, $hostdb->findsubnet ($subnet_name));
	}
}

usage () if (! @subnets);

my $failed = 0;
foreach my $subnet (@subnets) {
	die ("$0: Empty subnet, oh no.\n") if (! $subnet);

	my %generated_files;
	
	$failed = 1 if (! print_dhcp_config ($hostdb, $subnet, $output_dir, \%generated_files, $debug, $quiet));
	$failed = 1 if (! remove_old_files ($subnet, $output_dir, \%generated_files, $remove_old, $debug, $quiet));

	last if ($failed);
}


exit ($failed);


sub print_dhcp_config
{
	my $hostdb = shift;
	my $subnet = shift;
	my $output_dir = shift;
	my $generated_files_ref = shift;
	my $debug = shift;
	my $quiet = shift;

	my @subnet_profiles = split (',', $subnet->profilelist ());
	my $subnet_name = $subnet->subnet ();
	my $subnet_id = $subnet->id ();

	if (! grep (/^default$/, @subnet_profiles)) {
		warn ("$0: No 'default' profile for subnet '$subnet_name', skipping subnet.\n");
		return undef;
	}

	my (@ranges, $range_start, $range_end, %hosts);

	foreach my $host ($hostdb->findhostbyiprange ($subnet->netaddr (), $subnet->broadcast ())) {
		if ($host->dhcpmode () eq 'DYNAMIC') {
			$range_start = $host->ip () if (! $range_start);
			$range_end = $host->ip ();
			next;
		} else {
			my $id = $host->id ();
			my $ip = $host->ip ();
			my $hostname = $host->hostname () || 'NULL';

			if ($range_start) {
				# ok, so it was a range
				push (@ranges, "${range_start}	${range_end}");
				$range_start = '';
			}
			
			my $profile = $host->profile ();
			if (! grep (/^$profile$/, @subnet_profiles)) {
				warn ("$0: Host $id ($ip, $hostname) profile $profile not listed for subnet $subnet_name");
			}
			
			if (! $hostdb->is_valid_profilename ($profile)) {
				warn ("$0: Invalid profile name '$profile' for host $id ($ip, $hostname), skipping.\n");
			} else {
				push (@{$hosts{$profile}}, $host);
			}
		}

	}
	if ($range_start) {
		# ok, so it was a range
		push (@ranges, "${range_start}	${range_end}");
		$range_start = '';
	}

	my $fn = "${subnet_name}_id${subnet_id}_options";
	my $OUT = new FileHandle;
		
	$fn =~ s#/#-#go;	# replace slash(es) with - (dash)
	print ("Building $fn\n") unless ($quiet);
	my $outfile = "$output_dir/$fn";
	
	open ($OUT, "> $outfile.new") or warn ("$0: Could not open outfile '$outfile.new' for writing: $!\n"), return undef;

	if (-f $outfile) {
		# copy leading comments from existing file
		open (IN, "< $outfile") or warn ("$0: Could not open existing '$outfile' for reading: $!\n"), return undef;
		while (my $t = <IN>) {
			if ($t =~ /^#/) {
				print ($OUT $t);
				next;
			} elsif ($t =~ /^\s*$/) {
				print ($OUT $t);
				last;
			}
			last;
		}
		close (IN);
	} else {
		# new file
		print ($OUT "# \$Id\$\n# DON'T EDIT THIS FILE, IT IS AUTO GENERATED AND WILL GET OVERWRITTEN\n#\n\n");
	}

	my $t;
	foreach $t (@ranges) {
		print ($OUT "	range $t;\n") or warn ("$0: Could not write to file '$outfile.new': $!\n"), return undef;		;
	}

	$generated_files_ref->{$fn} = 1;
	close ($OUT);
	rename ("$outfile.new", $outfile) or warn ("$0: Could not rename '$outfile.new' to '$outfile': $!\n");
	
	foreach my $profile (@subnet_profiles) {
		my $fn = "${subnet_name}_id${subnet_id}-${profile}";

		$fn =~ s#/#-#go;	# replace slash(es) with - (dash)
		print ("Building $fn\n") unless ($quiet);
		my $outfile = "$output_dir/$fn";
	
		my $OUT = new FileHandle;
		open ($OUT, "> $outfile.new") or warn ("$0: Could not open outfile '$outfile.new' for writing: $!\n"), return undef;

		if (-f $outfile) {
			# copy leading comments from existing file
			open (IN, "< $outfile") or warn ("$0: Could not open existing '$outfile' for reading: $!\n"), return undef;
			while (my $t = <IN>) {
				if ($t =~ /^#/) {
					print ($OUT $t);
					next;
				} elsif ($t =~ /^\s*$/) {
					print ($OUT $t);
					last;
				}

				last;
			}
			close (IN);
		} else {
			# new file
			print ($OUT "# \$Id\$\n# DON'T EDIT THIS FILE, IT IS AUTO GENERATED AND WILL GET OVERWRITTEN\n#\n\n");
		}
		
		my $t_count = 0;
		foreach my $host (@{$hosts{$profile}}) {
			print_host ($OUT, $host) or warn ("$0: Could not write to file '$outfile.new': $!\n"), return undef;		
			$t_count++;
		}

		warn ("$0: No hosts in $subnet_name profile $profile\n") if (! $t_count and ! $quiet);
		$generated_files_ref->{$fn} = 1;
		close ($OUT);
		rename ("$outfile.new", $outfile) or warn ("$0: Could not rename '$outfile.new' to '$outfile': $!\n");
	}
	
	return 1;
}


sub remove_old_files
{
	my $subnet = shift;
	my $output_dir = shift;
	my $generated_files_ref = shift;
	my $do_remove = shift;
	my $debug = shift;
	my $quiet = shift;

	opendir (DIR, $output_dir) or warn ("$0: Could not opendir () '$output_dir': $!\n"), return 0;
	
	my $file_regexp = $subnet->subnet () . "_id" . $subnet->id () . "-";
	$file_regexp =~ s#/#-#go;	# replace slash(es) with - (dash)
	
	my @files = grep { /^$file_regexp/ } readdir DIR;
	close (DIR);
	
	foreach my $fn (@files) {
		my $file = "$output_dir/$fn";
		
		next unless (-f $file);	# skip non-files
		
		if (! defined ($generated_files_ref->{$fn})) {
			if ($do_remove) {
				print ("Removing '$file'\n");
				unlink ($file) or warn ("$0: Could not unlink () '$file': $!\n"), return 0;
			} else {
				print ("NOT removing stale file '$file'\n") unless ($quiet);
			}
		}	
	}
	
	return 1;
}


sub print_host
{
	my $OUT = shift;
	my $host = shift;
	
	my $hostname = $host->hostname () || 'NULL';
	my $id = $host->id ();
	my $ip = $host->ip ();
	my $mac = $host->mac_address ();

	my $prefix = '';
	$prefix = '# DHCP disabled ' if ($host->dhcpstatus () eq 'DISABLED');

	if (! defined ($ip)) {
		$prefix = '# NO IP ';
		$ip = 'NULL';
	} elsif (! defined ($mac)) {
		$prefix = '# NO MAC ';
		$mac = 'NULL';
	}

	print ($OUT <<EOD) or return undef;
${prefix}host ${hostname}_${id} { hardware ethernet $mac; fixed-address $ip; option host-name \"$hostname\"; }
EOD

	return 1;
}
