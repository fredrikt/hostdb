#!/usr/bin/perl
#
# $Id$
#
# script to search for IP addresses or mac addresses
#

use strict;
use Config::IniFiles;
#use lib 'blib/lib';
use HOSTDB;

my $debug = 0;
if ($ARGV[0] eq "-d") {
	shift (@ARGV);
	$debug = 1;
}

my $hostdbini = Config::IniFiles->new (-file => '/usr/local/etc/hostdb.ini');

my $hostdb = HOSTDB::DB->new (dsn => $hostdbini->val ('db', 'dsn'),
			  db => $hostdbini->val ('db', 'database'),
			  user => $hostdbini->val ('db', 'user'),
			  password => $hostdbini->val ('db', 'password'),
			  debug => $debug
			 );

my @searchfor = @ARGV;

if ($#searchfor == -1) {
	die ("Syntax: $0 [-d] IP/mac ...\n");
}

my $first = 1;
while ($ARGV[0]) {
	my @host_refs;
	my $search_for = shift;

	my $t = $search_for;

	# check if it is a mac-address
	if ($hostdb->clean_mac_address ($t)) {
		$search_for = $t;
		
		@host_refs = $hostdb->findhostbymac ($search_for);
	} elsif ($hostdb->check_valid_ip ($search_for)) {
		@host_refs = $hostdb->findhostbyip ($search_for);
	} elsif ($hostdb->valid_fqdn ($search_for)) {
		@host_refs = $hostdb->findhostbyname ($search_for);
	} else {
		die ("Don't recognize '$search_for'\n");
	}

	if (@host_refs) {
		foreach my $host_ref (@host_refs) {
			foreach my $host (@$host_ref) {
				print ("Host :\n\n");
		
				print ("	ID	" . $host->id () . "\n");
				print ("	Parent	" . ($host->partof ()?$host->partof ():"-") . "\n");
				print ("	---\n");
				print ("	IP address	" . $host->ip () . "\n");
				print ("	MAC address	" . $host->mac_address () . "\n");
				print ("	Hostname	" . $host->hostname () . "\n");
				print ("	User		" . $host->user () . "\n");
				print ("	Owner		" . $host->owner () . "\n");
		
				print ("\n");
		
				my $subnet = $hostdb->findsubnetclosestmatch ($host->ip ());
		
				if ($subnet) {
					printf ("	%-23s %-20s %s\n", "subnet", "netmask", "description");
				
					printf ("	%-23s %-20s %s\n", $subnet->subnet(),
							$subnet->netmask (), $subnet->description ());
		
					print ("\n");
				} else {
					print ("Could not find a subnet in database\n\n");
				}
			}
			
			print ("---\n\n");
		}
	}
}
