#!/usr/local/bin/perl -w
#
# $Id$
#
# script to search for IP addresses or mac addresses
#

use strict;
use HOSTDB;

my $debug = 0;
if ($ARGV[0] eq "-d") {
	shift (@ARGV);
	$debug = 1;
}

my $hostdb = HOSTDB::DB->new (inifile => HOSTDB::get_inifile (),
			      debug => $debug
			     );

my @searchfor = @ARGV;

if ($#searchfor == -1) {
	die ("Syntax: $0 [-d] <IP/FQDN/MAC> ...\n");
}

my $first = 1;
while ($ARGV[0]) {
	my @host_refs;
	my $search_for = shift;

	my $t = $search_for;

	@host_refs = $hostdb->findhost ('guess', $search_for);
	if ($hostdb->{error}) {
		die ("$0: $hostdb->{error}\n");
	}

	if (@host_refs) {
		foreach my $host (@host_refs) {
			print ("Host :\n\n");

			my $zone;
			my $z = $hostdb->findzonebyhostname ($host->hostname ());

			if (defined ($z)) {
				$zone = $z->zonename ();
			} else {
				$zone = 'No zone found';
			}
		
			# interpolation
			my $id = $host->id ();
			my $parent = $host->partof ()?$host->partof ():"-";
			my $ip = $host->ip ();
			my $mac = $host->mac_address () || "n/a";
			my $mac_ts = $host->mac_address_ts () || "no timestamp";
			my $hostname = $host->hostname () || 'NULL';
			my $user = $host->user () || 'NULL';
			my $owner = $host->owner ();
			my $dhcpstatus = $host->dhcpstatus ();
			my $dhcpmode = $host->dhcpmode ();
			my $dnsstatus = $host->dnsstatus ();
			my $dnsmode = $host->dnsmode ();
			my $ttl = $host->ttl () || 'default';
			#my $dhcpprofile = $host->dhcpprofile () || 'default';

			print (<<EOH);
	ID	$id
	Parent	$parent
	---
	
	DNS :
	  IP address	$ip
	  Hostname	$hostname
	  Zone		$zone
	  TTL		$ttl
	  Status	$dnsstatus
	  Mode		$dnsmode
	
	DHCP :
	  MAC address	$mac (last seen $mac_ts)
	  Status	$dhcpstatus
	  Mode		$dhcpmode

	General :
	  User		$user
	  Owner		$owner

EOH
			
			my $subnet = $hostdb->findsubnetclosestmatch ($host->ip ());
		
			if ($subnet) {
				printf ("	%-23s %-20s %s\n", "subnet", "netmask", "description");
				
				printf "	%-23s %-20s %s\n", $subnet->subnet(),
						$subnet->netmask (), $subnet->description ();
		
				print ("\n");
			} else {
				print ("Could not find a subnet in database\n\n");
			}
		}
			
		print ("---\n\n");
	} else {
		print ("No match\n");
	}
}
