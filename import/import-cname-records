#!/usr/local/bin/perl -w
#
# $Id$
#
# script to read strictly (or optionally fuzzy) formatted BIND9 zone
# files and put all CNAME records in our host database.
#

use strict;
use HOSTDB;
use Getopt::Std;
use vars qw ($opt_h $opt_o $opt_n $opt_d $opt_F);

getopts ('ho:ndF');

if (defined ($opt_h)) {
    die (<<EOT);
Syntax : $0 [options] zonefile ...

    Options :

	-d	debug
	-n	hostdb dry run
	-o fn	output zonefile name, works only with a single zone
	-F	fuzzy mode

EOT
}

my $debug = defined ($opt_d);
my $db_dry_run = defined ($opt_n);
my $output_filename = $opt_o || '';
my $fuzzy = defined ($opt_F);

my @files = @ARGV;
my $default_ttl;

if ($#files == -1) {
    die ("Syntax: $0 zonefiles\n");
}

if ($output_filename and $#files != 0) {
    die ("$0: You can't specify output filename when you have more than one input zone\n");
}

if ($output_filename) {
    open (OUTFILE, "> $output_filename") or die ("Could not open '$output_filename' for writing: $!\n");
}

my $hostdb = HOSTDB::DB->new (inifile => HOSTDB::get_inifile (),
			      debug => $debug
			      );

my $exitstatus = 0;
my %problems;

foreach my $file (@files) {
    open (FIL, "< $file") or die ("Could not open $file for reading: $!\n");

    my $imported = 0;
    $default_ttl = 0;
    my $origin = '.';

    my @delayed;
    while (my $rad = <FIL>) {
	my $skip_copy = 0;
	if ($rad =~ /^\s*;/) {
	    # skip comments
	    if ($output_filename) {
		print (OUTFILE "$rad");
	    }
	    next;
	}

	chomp ($rad);

	$default_ttl = $1 if ($rad =~ /^\$TTL\s+(\d+)/);
	
	my ($aliasname, $ttl, $hostname) = ('', '', '');

	if ($rad =~ /^(\S+?)\s+(\d+)\s+CNAME\s+(\S+?)\s*$/) {
	    ($aliasname, $ttl, $hostname) = ($1, $2, $3);
	} elsif ($fuzzy) {
	    # Fuzzy operations, handle $ORIGIN but don't do TTL
	    if ($rad =~ /^(\S+?)\s+.*\sCNAME\s+(\S+?)\s*$/) {
		($aliasname, $hostname) = ($1, $2);
		$aliasname .= ".$origin" unless has_trailing_dot ($aliasname);
		$hostname .= ".$origin" unless has_trailing_dot ($hostname);
	    } elsif ($rad =~ /^\s*\$ORIGIN\s+(\S+)\s*$/) {
		my $n = $1;
		if (! has_trailing_dot ($n)) {
		    # ORIGIN is foo, add it to the beginning of the existing origin
		    $origin = "$n.$origin";
		} else {
		    $origin = "$n";
		}
		warn ("Set origin to '$origin' ($n)\n");
	    }
	}

	if ($aliasname) {
	    if (add_host ($hostdb, $aliasname, $ttl, $hostname, $debug, $db_dry_run)) {
		$imported++;
		$skip_copy = 1;
	    } else {
		$problems{$file} = 1;
		$exitstatus = 1;
	    }
	}

	if (! $skip_copy and $output_filename) {
	    print (OUTFILE "$rad\n");
	}
    }

    print ("Imported $imported CNAME RR's from file $file\n");

    close (FIL);
}

close (OUTFILE) if ($output_filename);
print ("done\n");

if ($#files != 0) {
    my $p = join ("\n\t", sort keys (%problems));
    print ("\n\nProblems encountered in the following files :\n\n\t$p\n\n");
}

exit ($exitstatus);

sub add_host
{
    my ($hostdb, $aliasname, $ttl, $hostname, $debug, $dry_run) = @_;

    if (! $hostdb->clean_hostname ($aliasname)) {
	warn ("$0: ERROR: Aliasname '$aliasname' is not a clean hostname! Skipped.\n");
	return 0;
    }

    if (! $hostdb->clean_hostname ($hostname)) {
	warn ("$0: ERROR: Hostname '$hostname' is not a clean hostname! Skipped.\n");
	return 0;
    }

    my @hosts = $hostdb->findhost ('guess', $hostname);
    if (! @hosts) {
	warn ("$0: Alias '$aliasname' skipped. No host named '$hostname' found in HOSTDB.\n");
	return 0;
    }

    if (0 + @hosts != 1) {
	warn ("$0: ERROR: Alias '$aliasname' skipped. More than one host matches '$hostname'.\n");
	return 0;
    }

    my $host = $hosts[0];

    my $z = $hostdb->findzonebyhostname ($aliasname);
    warn ("$0: ERROR: Could not find a suitable DNS zone for aliasname '$aliasname'\n"), return undef unless defined ($z);
    my $dnszone = $z->zonename ();

    if ($dry_run) {
	my $t = $ttl || '';
	print ("dry-run skipping host '$aliasname $hostname' (dns zone '$dnszone')\n");
	return 1;
    }

    my $alias = $host->create_hostalias ();
    die ("$0: ERROR: Could not create hostalias object: $host->{error}\n") unless ($alias);

    my $set_ttl = $host->ttl () || 'NULL';
    $set_ttl = $ttl if (defined ($ttl) and $ttl);
    $alias->aliasname ($aliasname)	or die ("$0: Could not set 'aliasname': $alias->{error}\n");
    $alias->dnsstatus ('ENABLED')	or die ("$0: Could not set 'dnsstatus': $alias->{error}\n");
    $alias->ttl ($set_ttl)		or die ("$0: Could not set 'ttl' ('$set_ttl'): $alias->{error}\n");
    $alias->comment ('dns-import')	or die ("$0: Could not set 'comment': $alias->{error}\n");
    $alias->dnszone ($dnszone)		or die ("$0: Could not set 'dnszone': $alias->{error}\n");

    print ("add alias '$aliasname $ttl $hostname' (dns zone '$dnszone')\n") if ($debug);

    if (! $alias->commit()) {
	warn ("$0: ERROR: Failed committing alias object : $alias->{error}\n");
	return 0;
    }

    return 1;
}

sub has_trailing_dot
{
    my $in = shift;
    return ($in =~ /\.$/);
}
