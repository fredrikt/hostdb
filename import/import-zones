#!/usr/local/bin/perl -w
#
# $Id$
#
# script to read a named.conf without fancy commenting ( /* */ style) and
# with one zone per row in our host database.
#

use strict;
use HOSTDB;
use Net::DNS;

my $debug = 0;
my $file = shift @ARGV;
my $default_ttl;

if (! $file or $#ARGV != -1) {
	warn ("No named.conf filename given as argument, expecting zone names on stdin.\n");
}

my $hostdb = HOSTDB::DB->new (inifile => HOSTDB::get_inifile (),
			      debug => $debug
			     );

my %counters;
$counters{imported} = 0;
$counters{ignored} = 0;
$counters{failed} = 0;

if ($file) {
	open (FIL, "< $file") or die ("Could not open $file for reading: $!\n");

	while (my $rad = <FIL>) {
		chomp ($rad);

		if ($rad =~ /^zone\s+\"(.+?)\"\s+{\s*type master/) {
			my $name = $1;
			do_zone ($hostdb, $name, \%counters);
		}
	}
	close (FIL);
} else {
	while (my $rad = <>) {
		chomp ($rad);
		do_zone ($hostdb, $rad, \%counters);
	}
}

print ("Imported $counters{imported} zones, failed $counters{failed}, ignored $counters{ignored}");
if ($file) {
	print (" from file $file\n");
} else {
	print (" from STDIN\n");
}

print ("done\n");


sub do_zone
{
	my $hostdb = shift;
	my $name = shift;
	my $count_ref = shift;

	if ($name eq "0.0.127.in-addr.arpa." or $name eq "0.0.127.in-addr.arpa" or
	    $name eq "255.in-addr.arpa." or $name eq "255.in-addr.arpa" or
	    $name eq "0.in-addr.arpa." or $name eq "0.in-addr.arpa" or
	    $name eq "localhost." or $name eq "localhost") {
		$count_ref->{ignored}++;
		return undef;
	}

	my $serial = get_soa_serial ($name);

	if ($serial) {
		warn("zone $name, $serial\n");

		$count_ref->{imported}++ if (db_add_zone ($hostdb, $name, $serial));
	} else {
		$count_ref->{failed}++;
		return 0;
	}

	return 1;
}

sub db_add_zone
{
	my $hostdb = shift;
	my $zonename = shift;
	my $serial = shift;
	
	if ($hostdb->is_valid_domainname ($zonename)) {
		my $zone = $hostdb->create_zone ();
		
		if (! $zone) {
			warn ("Could not create zone object: $hostdb->{error}\n");
			return undef;
		}

		my $valid = 1;
		$zone->zonename ("$zonename") or warn ($zone->{error}), $valid = 0;
		warn ("ZONENAME: " . $zone->zonename () . "\n");
		$zone->serial ($serial) or warn ($zone->{error}), $valid = 0;
		$zone->owner ("import") or warn ($zone->{error}), $valid = 0;
		$zone->delegated ("N") or warn ($zone->{error}), $valid = 0;

		$zone->commit() if ($valid);
	
		undef ($zone);
	
		return $valid;
	}

	return 0;
}

sub get_soa_serial
{
	my $zone = shift;

	my $res = Net::DNS::Resolver->new;
	my $query = $res->query("$zone", "SOA");

	if ($query) {
		foreach my $rr ($query->answer) {
			next unless $rr->type eq "SOA";
			return $rr->serial;
		}
	}

	warn ("Could not get SOA serial for zone '$zone'\n");
	return undef;
}
