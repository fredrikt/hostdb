#!/usr/local/bin/perl
#
# $Id$
#
# script to read strictly formatted BIND9 zone files and put all A records
# in our host database.
#

use strict;
use Config::IniFiles;
#use lib 'blib/lib';
use HOSTDB;

my $debug = 0;
my @files = @ARGV;
my $default_ttl;

if ($#files == -1) {
	die ("Syntax: $0 zonefiles\n");
}

my $hostdbini = Config::IniFiles->new (-file => HOSTDB::get_inifile ());

my $hostdb = HOSTDB::DB->new (dsn => $hostdbini->val ('db', 'dsn'),
			  db => $hostdbini->val ('db', 'database'),
			  user => $hostdbini->val ('db', 'user'),
			  password => $hostdbini->val ('db', 'password'),
			  debug => $debug
			 );

foreach my $file (@files) {
	open (FIL, "< $file") or die ("Could not open $file for reading: $!\n");

	my $imported = 0;
	$default_ttl = 0;
	my @delayed;
	while (my $rad = <FIL>) {
		chomp ($rad);
		
		$default_ttl = $1 if ($rad =~ /^\$TTL\s+(\d+)/);

		if ($rad =~ /^(.+?)\s+(\d+)\s+A\s+([\d\.]+)$/) {
			my ($name, $ttl, $ip) = ($1, $2, $3);

			my $delay = 0;

			if ($name =~ /^(b2-gw2|ny-gw2|physto-gw|stud-gw|su2-gw)\./) {
				# name is one of our routers which has multiple IPs with
				# the same name. see if it is the loopback address, delay
				# if not.
				$delay = 1 if ($ip !~ /^130\.237\.154\.(25|131|128|203|130)$/);
			}

			$delay = 1 if ($name =~ /^(mbox|mx)\.su\.se\.$/);

			if ($delay) {
				my @info = ($name, $ttl, $ip);
				push (@delayed, \@info);
				next;
			}
			
			$imported++ if (add_host (0, $name, $ttl, $ip));
		}
	}

	foreach my $arrayref (@delayed) {
		my ($name, $ttl, $ip) = @{ $arrayref };

		$imported++ if (add_host (1, $name, $ttl, $ip));
	}

	print ("Imported $imported A RR's from file $file\n");
	
	close (FIL);
}

print ("done\n");

sub add_host
{
	my ($lookuphost, $name, $ttl, $ip) = @_;
	
	my $host = $hostdb->create_host();

	if ($lookuphost) {
		my $super_host = $hostdb->findhostbyip ($ip);
		$host->set_partof ($super_host->{id}) if ($super_host->{id});
		undef ($super_host);
	}
			
	my $valid = 1;
	$host->hostname ("$name") or warn ($host->{error}), $valid = 0;
	$host->ip ("$ip") or warn ($host->{error}), $valid = 0;
	$host->ttl ("$ttl") if ($ttl != $default_ttl) or warn ($host->{error}), $valid = 0;
	$host->user ("import") or warn ($host->{error}), $valid = 0;
	$host->reverse ("Y") or warn ($host->{error}), $valid = 0;
			
	$host->commit() if ($valid);

	undef ($host);
	
	return $valid;
}

