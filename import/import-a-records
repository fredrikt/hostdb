#!/usr/local/bin/perl -w
#
# $Id$
#
# script to read strictly formatted BIND9 zone files and put all A records
# in our host database.
#

use strict;
use HOSTDB;
use Getopt::Std;
use vars qw ($opt_h $opt_o $opt_n $opt_d);

getopts ('ho:nd');

if (defined ($opt_h)) {
    die (<<EOT);
Syntax : $0 [options] zonefile ...

    Options :

	-d	debug
	-n	hostdb dry run
	-o fn	output zonefile name, works only with a single zone

EOT
}

my $debug = defined ($opt_d);
my $db_dry_run = defined ($opt_n);
my $output_filename = $opt_o || '';

my @files = @ARGV;
my $default_ttl;

if ($#files == -1) {
    die ("Syntax: $0 zonefiles\n");
}

if ($output_filename and $#files != 0) {
    die ("$0: You can't specify output filename when you have more than one input zone\n");
}

if ($output_filename) {
    open (OUTFILE, "> $output_filename") or die ("Could not open '$output_filename' for writing: $!\n");
}

my $hostdb = HOSTDB::DB->new (inifile => HOSTDB::get_inifile (),
			      debug => $debug
			      );

my $exitstatus = 0;

foreach my $file (@files) {
    open (FIL, "< $file") or die ("Could not open $file for reading: $!\n");

    my $imported = 0;
    $default_ttl = 0;
    my @delayed;
    my $skip_copy = 0;

    while (my $rad = <FIL>) {
	chomp ($rad);

	$default_ttl = $1 if ($rad =~ /^\$TTL\s+(\d+)/);

	if ($rad =~ /^(\S+?)\s+(\d+)\s+A\s+([\d\.]+)$/) {
	    my ($name, $ttl, $ip) = ($1, $2, $3);

	    my $delay = 0;

	    if ($name =~ /^(b2-gw2|ny-gw2|physto-gw|stud-gw|su2-gw)\./) {
		# name is one of our routers which has multiple IPs with
		# the same name. see if it is the loopback address, delay
		# if not (since we want the loopback address to be the
		# primary hostname).
		$delay = 1 if ($ip !~ /^130\.237\.154\.(25|131|128|203|130)$/);
	    }

	    $delay = 1 if ($name =~ /^(mbox|mx)\.su\.se\.$/);

	    if ($delay) {
		my @info = ($name, $ttl, $ip);
		push (@delayed, \@info);
		$skip_copy++;
		next;
	    }

	    if (add_host ($hostdb, 0, $name, $ttl, $ip, $debug, $db_dry_run)) {
		$imported++;
		$skip_copy = 1;
	    } else {
		$exitstatus = 1;
	    }
	}

	if (! $skip_copy and $output_filename) {
	    print (OUTFILE "$rad\n");
	}
    }

    foreach my $arrayref (@delayed) {
	my ($name, $ttl, $ip) = @{ $arrayref };

	if (add_host ($hostdb, 1, $name, $ttl, $ip, $debug, $db_dry_run)) {
	    $imported++;
	} else {
	    $exitstatus = 1;
	}
    }

    print ("Imported $imported A RR's from file $file\n");

    close (FIL);
}

close (OUTFILE) if ($output_filename);
print ("done\n");

exit ($exitstatus);

sub add_host
{
    my ($hostdb, $findparent, $name, $ttl, $ip, $debug, $dry_run) = @_;

    my $host = $hostdb->findhostbyname ($name);
    my $dnszone;

    if (defined ($host)) {
	warn ("$0: conflicting hostname '$name' (import IP $ip, hostdb IP " . $host->ip () . "), skipped\n");
	return 0;
    }

    $host = undef;

    my $z = $hostdb->findzonebyhostname ($name);

    warn ("$0: Could not find a suitable DNS zone for hostname '$name'\n"), return undef unless defined ($z);
    $dnszone = $z->zonename ();

    if ($dry_run) {
	print ("dry-run skipping host '$name $ttl $ip' (dns zone '$dnszone')\n");
	return 1;
    }

    $host = $hostdb->create_host();

    die ("$0: Could not create host object: $hostdb->{error}\n") unless ($host);

    if ($findparent) {
	my $s = $hostdb->findhostbyip ($ip);
	my $parent_id;
	$parent_id = $s->id () if defined ($s);
	my $parent_hostname = $s->hostname() if (defined ($s));
	$host->partof ($s) if ($parent_id);
	undef ($s);

	if ($debug) {
	    if ($parent_id) {
		print ("add host '$name $ttl $ip', parent $parent_id ($parent_hostname) (dns zone '$dnszone')\n");
	    }
	} else {
	    print ("add host '$name $ttl $ip' (dns zone '$dnszone')\n");
	}
    } else {
	print ("add host '$name $ttl $ip' (dns zone '$dnszone')\n") if ($debug);
    }

    my $valid = 1;
    $host->hostname ("$name") or warn ($host->{error}), $valid = 0;
    $host->ip ("$ip") or warn ($host->{error}), $valid = 0;
    if ($ttl ne $default_ttl) {
	$host->ttl ("$ttl") or warn ($host->{error}), $valid = 0;
    }
    $host->user ("dns-import") or warn ($host->{error}), $valid = 0;
    $host->owner ("dns-import") or warn ($host->{error}), $valid = 0;
    $host->dnsmode ("A_AND_PTR") or warn ($host->{error}), $valid = 0;
    $host->dnsstatus ("ENABLED") or warn ($host->{error}), $valid = 0;
    if ($name =~ /^dhcp/ and $name !~ /^dhcp\d\.su\.se$/) {
	$host->dhcpmode ("DYNAMIC") or warn ($host->{error}), $valid = 0;
    } else {
	$host->dhcpmode ("STATIC") or warn ($host->{error}), $valid = 0;
    }
    $host->dhcpstatus ("ENABLED");
    $host->manual_dnszone('N');
    $host->profile('default');
    $host->dnszone ($dnszone);

    $host->commit() if ($valid);

    undef ($host);

    return $valid;
}
