#!/usr/local/bin/perl -w
#
# $Id$
#
# script to modify subnets in our database
#

use strict;
use Config::IniFiles;
use HOSTDB;
use Getopt::Long;
use vars qw ($opt_subnet $opt_ipver $opt_desc $opt_short_desc $opt_htmlcolor $opt_dhcpconfig $opt_owner $opt_profilelist $opt_force $opt_debug $opt_d $opt_h $opt_help);

my %o = ();
my $res = GetOptions (
	    "subnet=s",
	    "ipver=i",
	    "desc=s",
	    "short_desc=s",
	    "htmlcolor=s",
	    "dhcpconfig=s",
	    "owner=s",
	    "profilelist=s",
	    "force",
	    "debug",
	    "d",
	    "h",
	    "help"
	   );


my $debug = defined ($opt_d) || defined ($opt_debug);
my $subnet_name = shift;

my $hostdbini = Config::IniFiles->new (-file => HOSTDB::get_inifile ());
die ("$0: Config file access problem.\n") unless ($hostdbini);

my %colors = load_colors ($hostdbini);

if (! $subnet_name or $opt_h or $opt_help) {
	# interpolation
	my $inifilename = HOSTDB::get_inifile ();
	my $colors = join ("\n			", sort keys %colors);

	$colors = "Colors defined in $inifilename :\n			$colors" if ($colors);
	
	die(<<EOT);
Syntax: $0 [options] subnet
	options:
		-d		debug
		--force		skip some sanity checks
	All the following should be followed by the new value (--ipver 4) :
		--subnet	new subnet
		--ipver		IP version (currently useless)
		--desc		description
		--short_desc	short description
		--htmlcolor	color (see below)
		--dhcpconfig	dhcp config for subnet
		--owner		HOSTDB::Auth identifier
		--profilelist	comma-separated list of profiles for subnet

	subnet is the subnet in slash notation (eg. 192.168.1.0/24)
	
	color should be in html color syntax (eg. "#ffffcc") or
	a color defined in $inifilename
	
		$colors
EOT
}

my $hostdb = HOSTDB::DB->new (ini => $hostdbini, debug => $debug);

my $subnet = $hostdb->findsubnet ($subnet_name);

die ("Could not find subnet '$subnet_name' in database\n") if (! $subnet);

test_color ($hostdb, \%colors, $opt_htmlcolor) if (defined ($opt_htmlcolor));

$subnet->subnet ($opt_subnet)			or die ("$0: Invalid subnet - $subnet->{error}\n") if (defined ($opt_subnet));
$subnet->ipver ($opt_ipver)			or die ("$0: Invalid ipver - $subnet->{error}\n") if (defined ($opt_ipver));
$subnet->description ($opt_desc)		or die ("$0: Invalid description - $subnet->{error}\n") if (defined ($opt_desc));
$subnet->short_description ($opt_short_desc)	or die ("$0: Invalid short_description - $subnet->{error}\n") if (defined ($opt_short_desc));
$subnet->htmlcolor ($opt_htmlcolor)		or die ("$0: Invalid htmlcolor - $subnet->{error}\n") if (defined ($opt_htmlcolor));
$subnet->dhcpconfig ($opt_dhcpconfig)		or die ("$0: Invalid dhcpconfig - $subnet->{error}\n") if (defined ($opt_dhcpconfig));
$subnet->owner ($opt_owner)			or die ("$0: Invalid owner - $subnet->{error}\n") if (defined ($opt_owner));
$subnet->profilelist ($opt_profilelist)		or die ("$0: Invalid profilelist - $subnet->{error}\n") if (defined ($opt_profilelist));

$subnet->commit() or die ("Could not commit subnet object: " . $hostdb->{error} . "\n");

exit (0);


sub load_colors
{
	my $hostdbini = shift;
	my %res;
	
	my @colors = $hostdbini->Parameters ('subnet_colors');

	my $t;
	foreach $t (@colors) {
		$res{$t} = $hostdbini->val ('subnet_colors', $t);
	}

	# make RED the default so that a non-specified color is obvious
	$res{default} = "#ff0000" if (! defined ($res{default}));
	
	return %res;
}

sub test_color
{
	my $hostdb = shift;
	my $colors_ref = shift;
	my $color_name = shift;

	my $c = $color_name;

	if (defined ($colors_ref->{$color_name})) {
		$c = $colors_ref->{$color_name};

		if (! $hostdb->is_valid_htmlcolor ($c)) {
			die ("$0: Color '$color_name' resolved to '$c' which is an invalid HTML color.\n");
		}
	}

	if (! $hostdb->is_valid_htmlcolor ($c)) {
		warn ("$0: Color '$c' is an invalid HTML color.\n");
	}
}
