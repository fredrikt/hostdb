#!/usr/local/bin/perl
#
# $Id$
#
# script to draw subnet pngs
#

use strict;
use Config::IniFiles;
#use lib 'blib/lib';
use HOSTDB;
use GD;

my $slash24_height = 32;
my $pixels_per_ip = 4;

my $x_pixels_per_char = 6;
my $y_pixels_per_char = 8;

my $debug = 0;
if ($ARGV[0] eq "-d") {
	shift (@ARGV);
	$debug = 1;
}

my $hostdbini = Config::IniFiles->new (-file => HOSTDB::get_inifile ());

my $output_dir;
if ($ARGV[0] eq "-o") {
	shift (@ARGV);
	$output_dir = shift;
} else {
	$output_dir = $hostdbini->val ('subnet', 'output_dir');
}

if ($output_dir) {
	die("$0: Specified output dir '$output_dir' is not a valid directory\n") if (! -d $output_dir);
}

my $showsubnet_path = create_url (undef, $hostdbini->val ('subnet', 'http_base'),
				  $hostdbini->val ('subnet', 'showsubnet_path'));

die ("$0: Could not create path to showsubnet cgi-script.\n" .
     "You should probably specify 'http_base' and 'showsubnet_path'\n" .
     "in the 'subnet' section of '" . HOSTDB::get_inifile () . "'\n") if (! $showsubnet_path);

my $hostdb = HOSTDB::DB->new (dsn => $hostdbini->val ('db', 'dsn'),
			  db => $hostdbini->val ('db', 'database'),
			  user => $hostdbini->val ('db', 'user'),
			  password => $hostdbini->val ('db', 'password'),
			  debug => $debug
			 );

my @drawsubnets = @ARGV;

if ($#drawsubnets == -1) {
	my $in = $hostdbini->val ('subnet', 'draw_subnet_list');

	$in =~ s/,/ /go;	# get rid of comas
	$in =~ s/\s+/ /go;	# single spaces

	@drawsubnets = split (' ', $in);
}

if ($#drawsubnets == -1) {
	die ("Syntax: $0 [-d] netaddr/slash ...\n");
}

my %colors = load_colors ($hostdbini);

draw_misc($output_dir, \%colors);

my $html_file = ($output_dir?"$output_dir/":"") . "index.html";
open (HTML, "> $html_file") or die ("Could not open file '$html_file' for writing: $!\n");

print (HTML "<!DOCTYPE HTML PUBLIC '-//W3C//DTD HTML 4.01 Transitional//EN'>
	<html>
	<head>
		<title>Netplan</title>
	</head>
	
	<body>
");

my $supernet;
foreach $supernet (@drawsubnets) {
	my ($netaddr, $slash) = split ('/', $supernet);

	if (int ($slash) > 24) {
		warn ("Ignoring supernet '$supernet' - must be at least a /24\n");
		next;
	}

	if ($hostdb->is_valid_subnet ($supernet)) {
		do_supernet ($supernet, \%colors);
	} else {
		warn ("Ignoring invalid supernet '$supernet'\n");
	}
}

print (HTML "</body>\n</html>\n");

close (HTML);

sub do_supernet
{
	my $supernet = shift;
	my $colors_ref = shift;

	my @subnets;
	my $no_subnets_counter = 0;

	# start at
	my $slash24 = $hostdb->aton ($hostdb->get_netaddr ($supernet));
	
	my $last_slash24 = $hostdb->aton ($hostdb->get_broadcast ($supernet)) - 255;
	
	# fetch all subnets in the supernet, not just for this /24
	@subnets = $hostdb->findsubnetlongerprefix ($supernet);

	print ("Found " . ($#subnets + 1) . " subnets matching supernet '$supernet'\n") if ($debug);

	if ($#subnets != -1) {
		print (HTML "<table BORDER='0' CELLSPACING='0' CELLPADDING='0'>\n<tr><th ALIGN='left' COLSPAN='2'>Net $supernet :</th></tr>\n");
		#print (HTML "<h3>Net $supernet :</h3><p>\n<br>\n");

		print_row ("&nbsp;", "net_top.png", undef);

		while ($slash24 <= $last_slash24) {
			my $subnet_name = $hostdb->ntoa ($slash24) . "/24";

			# get a list of the subnets STARTING in this /24.
			my @slash24_subnets = get_subnets_starting_in_range (
				$subnet_name, @subnets);
			if ($#slash24_subnets != -1) {
				# check if it was a while since we saw the last subnet
				do_no_subnets ($no_subnets_counter);
				$no_subnets_counter = 0;
			
				print ("	$subnet_name: Drawing picture of " . 
					($#slash24_subnets + 1). " subnet(s)\n") if ($debug);
			
				my $fn = $subnet_name;
				$fn =~ s#[\./]#-#go;
				$fn .= ".png";
				
				print_row ($subnet_name, $fn, "$showsubnet_path&subnet=$subnet_name");

				$fn = "$output_dir/$fn" if ($output_dir);
	
				# draw_subnet() returns the number of addresses in what was drawn.
				# this is typically 256 for a /24, but if what we got was a larger
				# network (like a /23) this will be reflected.
				$slash24 += draw_subnet ($fn, $subnet_name, \@slash24_subnets, $colors_ref);
			} else {
				# no subnets found in this /24, go to the next
				$slash24 += 256;
				$no_subnets_counter++;
			}
		}
		
		print (HTML "</table><p>\n<br><hr>\n<p>\n");
	}
}

sub print_row
{
	my $left_side_text = shift;
	my $img_name = shift;
	my $link = shift;
	
	if ($link) {
		print (HTML <<EOH);
			<tr><td ALIGN='left'>$left_side_text&nbsp;</td>
			    <td ALIGN='left'><a href='$link'>
			    <img SRC='$img_name' ALT='$left_side_text' BORDER=0></a></td></tr>
EOH
	} else {
		print (HTML <<EOH);
			<tr><td ALIGN='left'>$left_side_text&nbsp;</td>
			    <td ALIGN='left'>
			    <img SRC='$img_name' ALT='$left_side_text' BORDER=0></td></tr>
EOH
	}
}

sub do_no_subnets
{
	my $counter = shift;
	
	return if (! $counter);
	
	if ($counter <= 10) {
		while ($counter-- > 0) {
			print_row ("...", "blank.png", undef);
		}
	} else {
		# more than three, print nice
		
		my $skipped_24s = $counter - 2;
		print_row ("...", "blank.png", undef);
		print(HTML "<tr><td ALIGN='left' COLSPAN='2'>Skipped $skipped_24s /24's</td></tr>\n");
		print_row ("...", "blank.png", undef);	
	}
}

sub get_subnets_starting_in_range
{
	my $supernet = shift;
	my @subnets = @_;
	my @result;

	my $low = $hostdb->aton ($hostdb->get_netaddr ($supernet));
	my $high = $hostdb->aton ($hostdb->get_broadcast ($supernet));

	my $subnet;
	foreach $subnet (@subnets) {
		my $netaddr = $hostdb->aton ($subnet->netaddr ());
		push (@result, $subnet) if ($netaddr >= $low and $netaddr <= $high);
	}

	return @result;
}

sub draw_subnet
{
	my $output_filename = shift;
	my $supernet = shift;
	my $subnets_ref = shift;
	my $colors_ref = shift;

	my @subnets = @$subnets_ref;
	my $total_address_count = 0;
	
	my $supernet_slash = (split ('/', $supernet))[1];
	
	# supernet is minimum a /24, possibly a /23 or even shorter prefix.
	# in any case a division with 256 will not result in 0.
	my $im_height = $slash24_height * int ($hostdb->get_num_addresses ($supernet_slash) / 256);
	my $im_width = 256 * $pixels_per_ip;
	
	print ("Creating image object ($im_width x $im_height)\n") if ($debug);
	
	my $im = new GD::Image ($im_width, $im_height);

	# allocate some colors - the first one becomes the background color
	my $subnet_default_fill = color_resolve ($im, $colors_ref, "default", "#ffffff");		# default white
	my $subnet_unused_frame = color_resolve ($im, $colors_ref, "subnet_unused_frame", "#000000");	# default black
	my $subnet_frame = color_resolve ($im, $colors_ref, "subnet_frame", "#0000ff");			# default blue
	my $subnet_text = color_resolve ($im, $colors_ref, "subnet_text", "#000000");			# default black

	my $bg = color_resolve ($im, $colors_ref, "subnet_background", "#c8ffc8");	# default bright green
	$im->filledRectangle (0, 0, $im_width - 1, $im_height - 1, $bg);
	
        # Put a (black) frame around the picture
	$im->rectangle (0, 0, $im_width - 1, $im_height - 1, $subnet_unused_frame);

    	my $subnet;

	my $subnet_height = 0;
	if (int ($supernet_slash) >= 24) {
		$subnet_height = $slash24_height;
	} else {
		$subnet_height = $im_height;
	}

	foreach $subnet (@subnets) {
		print ("		Drawing subnet " . $subnet->subnet() . "\n") if ($debug);	

		my $subnet_left_side = ($hostdb->aton ($subnet->netaddr ()) -
					$hostdb->aton ($hostdb->get_netaddr ($supernet))
				       ) * $pixels_per_ip;
		my $subnet_right_side = $subnet_left_side + ($subnet->addresses () * $pixels_per_ip) - 1;

		my $color = $subnet_default_fill;
		if ($subnet->htmlcolor ()) {
			my $t = $subnet->htmlcolor ();

			$color = color_resolve ($im, $colors_ref, "$t", undef);
		}
		# fill subnet with a color. this makes it easy to spot unallocated subnets.
		$im->filledRectangle ($subnet_left_side, 0, $subnet_right_side, $im_height - 1, $color);

		write_string ($im, $subnet_left_side, $subnet_right_side, $im_height, $subnet_text,
			      $subnet->short_description ());
		# draw border around subnet
		$im->rectangle ($subnet_left_side, 0, $subnet_right_side, 
				$im_height - 1, $subnet_frame);
		$total_address_count += $subnet->addresses();
	}

	open (FILE, "> $output_filename") or die ("$0: Could not open file '$output_filename' for writing: $!\n");
	
	binmode (FILE);
	print (FILE $im->png ());
	close (FILE);

	return 256 if ($total_address_count < 256);

	# if address count >= 256 it must be an even multiple of 256	
	return $total_address_count;
}

sub write_string
{
	my $im = shift;
	my $left_side = shift;
	my $right_side = shift;
	my $height = shift;
	my $color = shift;
	my $s = shift;

	my $x_pixels_per_char = 6;
	my $y_pixels_per_char = 8;

	# use substr() to only get first part of short_description if the whole
	# thing won't fit
	$s = substr ($s, 0, ($right_side - $left_side) / $x_pixels_per_char);

	# find middle of area height and subtract half a characters height
	my $text_y_pos = ($height / 2) - ($y_pixels_per_char / 2) - 1;

	# find middle of area and subtract half the length of the string in pixels
	my $s_pixel_width = length ($s) * $x_pixels_per_char;
	my $x_middle = $left_side + (($right_side - $left_side) / 2);
	my $text_x_pos = $x_middle - ($s_pixel_width / 2) + 1; 
	$im->string (gdSmallFont, $text_x_pos, $text_y_pos, $s, $color);
}

sub draw_misc
{
	my $output_dir = shift;
	my $colors_ref = shift;
	my $fn;

	# draw a blank 'net'
	$fn = ($output_dir?"$output_dir/":"") . "blank.png";

	my $im_height = $slash24_height;
	my $im_width = 256 * $pixels_per_ip;

	draw_blank ($fn, $im_width, $im_height, $colors_ref);

	$fn = ($output_dir?"$output_dir/":"") . "net_top.png";
	draw_net_top ($fn, $im_width, $im_height, $colors_ref);
}

sub draw_blank
{
	my $output_filename = shift;
	my $im_width = shift;
	my $im_height = shift;
	my $colors_ref = shift;

	print ("Creating blank image ($im_width x $im_height)\n") if ($debug);
	
	my $im = new GD::Image ($im_width, $im_height);

	# allocate some colors - the first one becomes the background color
	my $background = color_resolve ($im, $colors_ref, "subnet_blank", "#ffffff");

	# make the background transparent and interlaced
	$im->transparent ($background);
	$im->interlaced ('true');
            
	open (FILE, "> $output_filename") or die ("$0: Could not open file '$output_filename' for writing: $!\n");
	
	binmode (FILE);
	print (FILE $im->png ());
	close (FILE);
}

sub draw_net_top
{
	my $output_filename = shift;
	my $im_width = shift;
	my $im_height = shift;
	my $colors_ref = shift;

	print ("Creating net_top image ($im_width x $im_height)\n") if ($debug);
	
	my $im = new GD::Image ($im_width, $im_height);

	# allocate some colors - the first one becomes the background color
	my $subnet_top_background = color_resolve ($im, $colors_ref, "subnet_top_background", "#ffffff");	# default white
	my $subnet_top_text = color_resolve ($im, $colors_ref, "subnet_top_text", "#000000");		# default black
	my $subnet_top_frame = color_resolve ($im, $colors_ref, "subnet_top_frame", "#0000ff");		# default blue

	my $step = 16;
	my $i = 0;
	while ($i < 256) {
		my $left_side = $i * $pixels_per_ip;
		my $right_side = ($i + $step) * $pixels_per_ip;

		$im->rectangle ($left_side, 0, $right_side - 1, 
				$im_height - 1, $subnet_top_frame);

		write_string ($im, $left_side, $right_side, $im_height, $subnet_top_text, $i);
		
		$i += $step;
	}
	
	open (FILE, "> $output_filename") or die ("$0: Could not open file '$output_filename' for writing: $!\n");
	
	binmode (FILE);
	print (FILE $im->png ());
	close (FILE);
}

sub create_url
{
	my $q = shift;
	my $base = shift;
	my $in_url = shift;

	return undef if (! $in_url);
	
	my $url;
	if ($in_url !~ '^https*://') {
		# in_url appears to be relative
		$url = "$base/$in_url";
	} else {
		$url = $in_url;
	}

	$url =~ s#([^:])//#$1#;	# replace double slashes, but not the ones in http://

	if ($q) {
		$url .= '?_sucgi_sid=' . $q->getSID ();
	} else {
		# put this here since our users expects to be able to add
		# all their parameters with & as separator
		$url .= '?_sucgi_foo=bar';
	}

	return undef if ($url !~ '^https*://');
	return $url;
}

sub load_colors
{
	my $hostdbini = shift;
	my %res;
	
	my @colors = $hostdbini->Parameters ('subnet_colors');

	my $t;
	foreach $t (@colors) {
		$res{$t} = $hostdbini->val ('subnet_colors', $t);
	}

	# make RED the default so that a non-specified color is obvious
	$res{default} = "#ff0000" if (! defined ($res{default}));
	
	return %res;
}

sub is_valid_color
{
	my $in = shift;
	
	return 1 if ($in =~ /^#[0-9a-f]{6,6}$/i);
	return 0;
}

sub color_resolve
{
	my $im = shift;
	my $colors_ref = shift;
	my $color_name = shift;
	my $default = shift;

	my ($pack, $file, $line, $subname, $hasargs, $wantarray) = caller (0);

	my $c = $default;
	
	if (defined ($colors_ref->{$color_name})) {
		$c = $colors_ref->{$color_name};
		if (! is_valid_color ($c)) {
			die ("$0: Color lookup for '$color_name' resulted in invalid color '$c' ($file:$line).\n");
		}
	} else {
		if (! is_valid_color ($c)) {
			die ("$0: Oops, bad programmer. Default color '$c' " .
			     "(name '$color_name') is not valid ($file:$line).\n");
		}
	}

	my $c1 = hex (substr($c, 1, 2));
	my $c2 = hex (substr($c, 3, 2));
	my $c3 = hex (substr($c, 5, 2));
			
	return $im->colorResolve ($c1, $c2, $c3);
}
