#!/usr/local/bin/perl -w
#
# $Id$
#
# script to search for host entrys
#

use strict;
use HOSTDB;
use Getopt::Std;
use vars qw ($opt_h $opt_d $opt_r);

getopts ('hdr');

my $debug = 0;
my $raw = 0;

$debug = 1 if (defined ($opt_d));
$raw = 1 if (defined ($opt_r));

if (defined ($ARGV[0]) and $ARGV[0] eq "-d") {
	shift (@ARGV);
	$debug = 1;
}

my $hostdb = HOSTDB::DB->new (inifile => HOSTDB::get_inifile (),
			      debug => $debug
			     );

my @searchfor = @ARGV;

if ($#searchfor == -1 or $opt_h) {
	die ("Syntax: $0 [-dr] subnet/slash ...\n" .
	     "	subnet is the subnet in slash notation (eg. 192.168.1.0/24)\n" .
	     "	options :\n" .
	     "		-d debug output\n" .
	     "		-r raw mode, just IP address and hostnames, separated by semi-colon\n" .
	     "\n");
}

while ($searchfor[0]) {
	my $subnet = shift (@searchfor);

	if ($hostdb->is_valid_subnet ($subnet)) {
		my @hosts = $hostdb->findhostbyiprange ($hostdb->get_netaddr ($subnet),
				$hostdb->get_broadcast ($subnet));
		my @subnets;
		
		@subnets = $hostdb->findsubnetlongerprefix ($subnet);
		
		if ($#subnets != -1) {
			my $subnet;
			
			foreach $subnet (@subnets) {
				# interpolation
				my $color = $subnet->htmlcolor () || 'NULL';
				my $subnet_name = $subnet->subnet ();
				my $short_desc = $subnet->short_description ();
				my $desc = $subnet->description ();
				my $id = $subnet->id ();
				my $owner = $subnet->owner ();
				my $profilelist = $subnet->profilelist ();
				my $addresses = $subnet->addresses ();
				my $netmask = $subnet->netmask ();
				my $broadcast = $subnet->broadcast ();

				if (! $raw) {
					print (<<EOT);

$subnet_name :

  Netmask		$netmask
  Broadcast		$broadcast

  Short description	'$short_desc'
  Description		'$desc'

  Id			$id
  Owner			$owner
  Profiles		$profilelist
				
EOT
				}

				my @subnet_hosts = get_hosts_in_subnet ($subnet->subnet(), @hosts);
				if (@subnet_hosts) {
					my $num_hosts = scalar @subnet_hosts;
					
					print ("  $num_hosts hosts in subnet :\n\n") unless ($raw);
					my $host;
					my $fmt = "	%-20s %s\n";
					$fmt = "%s;%s\n" if ($raw);
					foreach $host (@subnet_hosts) {
						printf $fmt,
							$host->ip (),
							defined ($host->hostname ())?$host->hostname ():"NULL";
					}
				}
			}
			
			print ("\n") unless ($raw);
		}
	} else {
		warn ("Ignoring invalid subnet '$subnet'\n");
	}
}

sub get_hosts_in_subnet
{
	my $subnet = shift;
	my @hosts = @_;
	my @result;

	my $low = $hostdb->aton ($hostdb->get_netaddr ($subnet));
	my $high = $hostdb->aton ($hostdb->get_broadcast ($subnet));

	my $host;
	foreach $host (@hosts) {
		my $ip = $hostdb->aton ($host->ip ());
		push (@result, $host) if ($ip >= $low and $ip <= $high);
	}

	return @result;
}
