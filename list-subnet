#!/usr/local/bin/perl
#
# $Id$
#
# script to search for host entrys
#

use strict;
use Config::IniFiles;
#use lib 'blib/lib';
use HOSTDB;

my $debug = 0;
if ($ARGV[0] eq "-d") {
	shift (@ARGV);
	$debug = 1;
}

my $hostdbini = Config::IniFiles->new (-file => HOSTDB::get_inifile ());

my $hostdb = HOSTDB::DB->new (dsn => $hostdbini->val ('db', 'dsn'),
			  db => $hostdbini->val ('db', 'database'),
			  user => $hostdbini->val ('db', 'user'),
			  password => $hostdbini->val ('db', 'password'),
			  debug => $debug
			 );

my @searchfor = @ARGV;

if ($#searchfor == -1) {
	die ("Syntax: $0 [-d] netaddr/slash ...\n");
}

while ($ARGV[0]) {
	my $subnet = shift;

	if ($hostdb->check_valid_subnet ($subnet)) {
		my @hosts = $hostdb->findhostbyiprange ($hostdb->get_netaddr ($subnet),
				$hostdb->get_broadcast ($subnet));
		my @subnets;
		
		@subnets = $hostdb->findsubnetlongerprefix ($subnet);
		
		if ($#subnets != -1) {
			my $subnet;
			
			foreach $subnet (@subnets) {
				printf ("%-23s (%s) :\n", $subnet->subnet(),
					($subnet->description ()?$subnet->description ():"no description"));

				my @subnet_hosts = get_hosts_in_subnet ($subnet->subnet(), @hosts);
				if (@subnet_hosts) {
					my $host;
					foreach $host (@subnet_hosts) {
						printf ("	%-20s %s\n",
							$host->ip (),
							$host->hostname ()
						       );
					}
				}
			}
			
			print ("\n");
		}
	} else {
		warn ("Ignoring invalid subnet '$subnet'\n");
	}
}

sub get_hosts_in_subnet
{
	my $subnet = shift;
	my @hosts = @_;
	my @result;

	my $low = $hostdb->aton ($hostdb->get_netaddr ($subnet));
	my $high = $hostdb->aton ($hostdb->get_broadcast ($subnet));

	my $host;
	foreach $host (@hosts) {
		my $ip = $hostdb->aton ($host->ip ());
		push (@result, $host) if ($ip >= $low and $ip <= $high);
	}

	return @result;
}
