#!/usr/local/bin/perl -w
#
# $Id
#
# script to generate named.conf files
#

use strict;
use HOSTDB;
use Getopt::Std;
use vars qw ($opt_h $opt_d $opt_m $opt_s $opt_T $opt_I $opt_X);

getopts ('hdms:T:I:X:');

my $debug = defined ($opt_d);
my $gen_master = defined ($opt_m);
my $gen_type = $opt_T || 'undef';
my $iplist = $opt_I;
my %exclude_zones;

sub usage() {
	die (<<EOT);
Syntax: $0 -s or -m [options]
	options :
		-d	debug output
		-s IP	generate slave config, fetch zones from IP
		-m	generate master config
		-T type	generate [master|slave|forward] config
		-I IP-list  list of IP adresses for slave and forward
		-X file file containing zones to be excluded
EOT
}

usage() if ($opt_h);
usage() if (! $opt_s and ! $opt_m and $gen_type eq 'undef');
usage() if (($opt_s || $opt_m) && $gen_type ne 'undef');

$gen_type = 'master' if ($gen_master);
$gen_type = 'slave' if ($opt_s);

usage() if (defined $iplist and $opt_s);
$iplist = $opt_s if (!defined $iplist);

usage() if ($gen_type ne 'master' && !defined $iplist);

#
# We are done processing options, start the real work
#

my $hostdb = HOSTDB::DB->new (inifile => HOSTDB::get_inifile (),
			      debug => $debug
			     );

load_exclude_zones ($hostdb, $opt_X, \%exclude_zones) if ($opt_X);

foreach my $zone ($hostdb->findallzones ()) {
	next if ($zone->delegated () eq "Y");

	my $zonename = $zone->zonename ();

	next if ($exclude_zones{$zonename});

	my $z = tab_format (4, "zone \"$zonename\"");

	my $options = '';

	# XXX make this a configuration file thingy instead
	if ($zonename =~ /\.e164\.sunet\.se$/ or
	    $zonename =~ /\.e164\.arpa$/) {
		$options = 'allow-transfer { any; }; ';
	}

	if ($zonename =~ /\.168\.192\.in-addr\.arpa$/ or
	    $zonename =~ /\.10\.in-addr\.arpa$/ or
	    $zonename =~ /\.(16|17|18|19|2\d|31|32)\.172\.in-addr\.arpa$/ or
	    $zonename =~ /\.local\.su\.se$/ or $zonename eq 'local.su.se') {
		$options = 'allow-query { rfc1918-query-acl; }; ';
	}

	if ($gen_type eq 'master') {
	    if ($zonename =~ /^.*\.sub\.su\.se$/ or $zonename eq 'sub.su.se') {
		$options = 'allow-transfer { axfr-acl; 130.237.165.3; }; ';
	    }
	}

	if ($gen_type eq 'master') {
		print ("$z	{ type master; file \"/approved/$zonename..ZONE\"; $options};\n");
	} elsif ($gen_type eq 'slave') {
		print ("$z	{ type slave; masters { $iplist; }; file \"/slave/$zonename..DUMP\"; $options};\n");
	} elsif ($gen_type eq 'forward') {
		print ("$z	{ type forward; forward first; forwarders { $iplist }; };\n");
	} else {
        	die "unsupport type $gen_type";
	}
}

exit (0);


sub tab_format
{
	my $tab_count = shift;
	my $string = shift;

	my $minus_tabs = int (length ($string) / 8);

	return $string . "\t" x ($tab_count - $minus_tabs);
}

sub load_exclude_zones
{
    my $hostdb = shift;
    my $fn = shift;
    my $exclude_zones_ref = shift;

    open (F, "< $fn") or die ("$0: Could not open exclude-file '$fn' for reading : $!\n");
    while (my $rad = <F>) {
	chomp ($rad);

	next if ($rad =~ /^\s*\#/);	# ignore comments
	next if ($rad =~ /^\s*$/);	# ignore empty lines

	if (! $hostdb->clean_domainname ($rad)) {
	    die ("$0: Invalid domainname '$rad' on line $. of file '$fn'\n");
	}

	$$exclude_zones_ref{$rad} = 1;
    }

    close (F);
    return 1;
}
