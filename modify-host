#!/usr/local/bin/perl -w
#
# $Id$
#
# script to modify hosts in the database
#

use strict;
use HOSTDB;
use Getopt::Long;
use vars qw ($opt_ip $opt_hostname $opt_manual_dnszone $opt_dnszone $opt_owner $opt_dhcpmode $opt_dhcpstatus $opt_dnsmode $opt_dnsstatus $opt_mac_address $opt_ttl $opt_comment $opt_partof $opt_profile $opt_debug $opt_force);

my %o = ();
my $res = GetOptions (
	    "ip=s",
	    "hostname=s",
	    "dnszone=s",
	    "manual_dnszone=s",
	    "owner=s",
	    "dhcpmode=s",
	    "dhcpstatus=s",
	    "dnsmode=s",
	    "dnsstatus=s",
	    "mac_address=s",
	    "ttl=i",
	    "comment=s",
	    "partof=i",
	    "profile=s",
	    "debug",
	    "force"
	   );

#die ("$0: Parsing options failed\n") if ($res);

my $debug = defined ($opt_debug);
my $search_for = shift;

sub usage
{
	my $msg = shift;
	# interpolation
	
	die(<<EOT);
${msg}Syntax: $0 [options] <IP/FQDN/MAC/ID>
	options:
		--debug		debug
		--force		well, force
	object modifiers :
		--ip			IP address
		--hostname		FQDN
		--dnszone		The DNS zone to include this host in
		--manual_dnszone	Set to 'N' to disable automatic dnszone maintenance
		--partof n		parent Host ID
		--dhcpmode		STATIC or DYNAMIC
		--dhcpstatus		ENABLED or DISABLED
		--dnsmode		A_AND_PTR or A
		--dnsstatus		ENABLED or DISABLED
		--mac_address		MAC address
		--ttl			DNS TTL
		--comment		Comment abou host
		--owner			Username of owner

EOT
}

usage("") if (! $search_for);

my $hostdb = HOSTDB::DB->new (inifile => HOSTDB::get_inifile (),
			      debug => $debug
			     );

my $host = get_host ($hostdb, 'guess', $search_for);

die ("$0: Could not find host object\n") unless ($host);

if (! $opt_force) {
	# do some extra sanity checks if not forced

	my $h;
	
	if ($opt_ip) {
		$h = $hostdb->findhostbyip ($opt_ip);
		die ("$0: A host with IP $opt_ip already exists, use --force to set anyways.\n") if (defined ($h));
	}
	
	if ($opt_hostname) {
		$h = $hostdb->findhostbyname ($opt_hostname);
		die ("$0: A host with hostname $opt_hostname already exists, use --force to set anyways.\n") if (defined ($h));
	}
	
	if ($opt_mac_address) {
		$h = $hostdb->findhostbymac ($opt_mac_address);
		die ("$0: A host with MAC address $opt_mac_address already exists, use --force to set anyways.\n") if (defined ($h));
	}
	
	if ($opt_partof) {
		$h = $hostdb->findhostbyid ($opt_partof);
		die ("$0: A parent host with ID $opt_partof could not be found, use --force to set partof anyways.\n") unless (defined ($h));
	}
}

$host->ip ($opt_ip)			or die ("$0: Invalid ip - $host->{error}\n") if (defined ($opt_ip));
$host->owner ($opt_owner)		or die ("$0: Invalid owner - $host->{error}\n") if (defined ($opt_owner));
$host->dhcpmode ($opt_dhcpmode)		or die ("$0: Invalid dhcpmode - $host->{error}\n") if (defined ($opt_dhcpmode));
$host->dhcpstatus ($opt_dhcpstatus)	or die ("$0: Invalid dhcpstatus - $host->{error}\n") if (defined ($opt_dhcpstatus));
$host->dnsmode ($opt_dnsmode)		or die ("$0: Invalid dnsmode - $host->{error}\n") if (defined ($opt_dnsmode));
$host->dnsstatus ($opt_dnsstatus)	or die ("$0: Invalid dnsstatus - $host->{error}\n") if (defined ($opt_dnsstatus));
$host->mac_address ($opt_mac_address)	or die ("$0: Invalid mac_address - $host->{error}\n") if (defined ($opt_mac_address));
$host->ttl ($opt_ttl)			or die ("$0: Invalid ttl - $host->{error}\n") if (defined ($opt_ttl));
$host->comment ($opt_comment)		or die ("$0: Invalid comment - $host->{error}\n") if (defined ($opt_comment));
$host->partof ($opt_partof)		or die ("$0: Invalid partof - $host->{error}\n") if (defined ($opt_partof));
$host->manual_dnszone ($opt_manual_dnszone) or die ("$0: Invalid manual_dnszone - $host->{error}\n") if (defined ($opt_manual_dnszone));

if (defined ($opt_dnszone)) {
	$host->dnszone ($opt_dnszone) or die ("$0: Invalid dnszone - $host->{error}\n");
} else {
	if (defined ($opt_hostname) and $opt_hostname ne $host->hostname()) {
		# setting hostname, but not setting DNS zone. auto-detect.
		my $z = $hostdb->findzonebyhostname ($opt_hostname);

		if (defined ($z)) {
			if ($host->manual_dnszone () ne 'Y') {
				$host->dnszone ($z->zonename);
				warn ("$0: You changed hostname so I changed DNS zone for you (to " . $host->dnszone () . ")\n");
			} else {
				warn ("$0: NOT changing DNS zone (to " . $z->zonename () . ") since manual_dnszone is set to 'Y' for this host\n");
			}
		} else {
			warn ("$0: Could not find a suitable dnszone for new hostname '$opt_hostname'\n");
		}
	}
}
$host->hostname ($opt_hostname) or die ("$0: Invalid hostname - $host->{error}\n") if (defined ($opt_hostname));

$host->commit () or die ("$0: Could not commit host object - $host->{error}\n");

exit (0);


sub get_host
{
	my $hostdb = shift;
	my $datatype = shift;
	my $search_for = shift;
	my @host_refs;

	@host_refs = $hostdb->findhost ($datatype, $search_for);

	if ($#host_refs == -1) {
		warn ("$0: Search for '$search_for' (type '$datatype') failed - no match\n");
		return undef;
	}
	if ($#host_refs == -1) {
		my $count = $#host_refs + 1;
		warn ("$0: Search for '$search_for' (type '$datatype') failed - more than one ($count) match\n");
		return undef;
	}
	
	return $host_refs[0];
}

